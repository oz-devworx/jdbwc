/* ********************************************************************
 * Copyright (C) 2008 Oz-DevWorX (Tim Gall)
 * ********************************************************************
 * This file is part of JDBWC.
 * 
 * JDBWC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * JDBWC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with JDBWC.  If not, see <http://www.gnu.org/licenses/>.
 * ********************************************************************
 */
package com.jdbwc.core;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;

import com.jdbwc.exceptions.NotImplemented;

/**
 * NOTE: This is only a skeleton and has not been implemented yet!!!
 * 
 * @author Tim Gall (Oz-DevWorX)
 * @version 2008-05-29
 */
public class WCConnectionTransaction {

	protected WCConnection myConnection = null;

	protected WCConnectionTransaction() {
		super();
	}

	/**
	 * This is a work-around for now.<br />
	 * <br />
	 * Will most likly remain unchanged until PreparedStatement 
	 * and CallableStatement are made more operational.
	 */
	protected void setTransConnection(WCConnection connection){
		myConnection = connection;
	}
	
	/**
	 * @see java.sql.Connection#commit()
	 */
	public void commit() throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public int getTransactionIsolation() throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new WCPreparedStatement(myConnection, sql);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public void rollback() throws SQLException {
		// TODO Implement me!
		throw new NotImplemented();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		// TODO Implement me!
		throw new NotImplemented();
	}

	public Savepoint setSavepoint() throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		// TODO implement me!
		throw new NotImplemented();
	}

	public void setTransactionIsolation(int level) throws SQLException {
		// TODO Implement me!
		throw new NotImplemented();
	}

}